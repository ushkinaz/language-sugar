package baseLanguage.sugar.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.constraints.ModelConstraints;

public class QueriesGenerated {
  public static List<SubstituteAction> sideTransform_ActionsFactory_Expression_7730107903695571463(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.StringFormat"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode sf = SNodeFactoryOperations.createNewNode(_context.getModel(), "baseLanguage.sugar.structure.StringFormat", null);
        SNode current = _context.getSourceNode();
        SNodeOperations.replaceWithAnother(current, sf);
        SLinkOperations.setTarget(sf, "stringFormat", current, true);
        return sf;
      }

      public String getMatchingText(String pattern) {
        return "%";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.StringFormat"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.StringFormat"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_ExpressionStatement_6100386288364111693(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.UnlessInlineStatement"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode inlineStatement;
        inlineStatement = SNodeFactoryOperations.createNewNode(_context.getModel(), "baseLanguage.sugar.structure.UnlessInlineStatement", null);
        SNode current = _context.getSourceNode();
        SNodeOperations.replaceWithAnother(current, inlineStatement);
        SLinkOperations.setTarget(inlineStatement, "inlineExpression", SLinkOperations.getTarget(current, "expression", true), true);
        return inlineStatement;
      }

      public String getMatchingText(String pattern) {
        return "unless";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "inline reverted if";
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.UnlessInlineStatement"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.UnlessInlineStatement"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_ExpressionStatement_4998957681465439692(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.IfInlineStatement"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode inlineStatement;
        inlineStatement = SNodeFactoryOperations.createNewNode(_context.getModel(), "baseLanguage.sugar.structure.IfInlineStatement", null);
        SNode current = _context.getSourceNode();
        SNodeOperations.replaceWithAnother(current, inlineStatement);
        SLinkOperations.setTarget(inlineStatement, "inlineExpression", SLinkOperations.getTarget(current, "expression", true), true);
        return inlineStatement;
      }

      public String getMatchingText(String pattern) {
        return "if";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "inline if";
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.IfInlineStatement"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("baseLanguage.sugar.structure.IfInlineStatement"), null));
      }
    });
    return result;
  }
}
